{"version":3,"sources":["components/card.jsx","components/cardlist.jsx","components/searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","information","id","name","email","Cardlist","informations","map","key","Searchbox","type","placeholder","onChange","handleOnserach","App","state","searchfield","bind","fetch","then","response","json","users","setState","event","this","target","value","filteredmonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iWAceA,MAZf,SAAcC,GAEV,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,YAAYC,GAA5C,4BACrB,4BAAKL,EAAMI,YAAYE,MACvB,+BAAKN,EAAMI,YAAYG,SCKpBC,MAVf,SAAmBR,GAEf,OACI,yBAAKC,UAAU,YACVD,EAAMS,aAAaC,KAAI,SAAAN,GAAW,OACjC,kBAAC,EAAD,CAAMO,IAAKP,EAAYC,GAAKD,YAAaA,S,MCKxCQ,MAXf,SAAmBZ,GAEf,OACQ,2BACGC,UAAU,YACVY,KAAK,SACLC,YAAY,SACZC,SAAUf,EAAMgB,kBCsChBC,E,kDAxCb,aACC,IAAD,8BACE,gBACKC,MAAQ,CACXT,aAAc,GACdU,YAAY,IAEd,EAAKH,eAAiB,EAAKA,eAAeI,KAApB,gBANxB,E,gEASC,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAACjB,aAAcgB,S,qCAIlBE,GAEbC,KAAKF,SAAS,CAACP,YAAcQ,EAAME,OAAOC,U,+BAG3C,IAAD,EACyCF,KAAKV,MAApCT,EADV,EACUA,aAAcU,EADxB,EACwBA,YAChBY,EAAmBtB,EAAauB,QAAO,SAAA5B,GAAW,OACtDA,EAAYE,KAAK2B,cAAcC,SAASf,EAAYc,kBAGtD,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWe,eAAiBY,KAAKZ,iBACjC,kBAAC,EAAD,CAAUP,aAAgBsB,S,GAnChBI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90edee0a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.css'\r\nfunction Card(props)\r\n{\r\n    return(\r\n        <div className=\"Card-Container\">\r\n            <img alt=\"Avatar\" src={`https://robohash.org/${props.information.id}?set=set3&size=240x240`}/>\r\n            <h1>{props.information.name}</h1>\r\n            <p> {props.information.email}</p>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport './cardlist.css'\r\nimport Card from './card.jsx'\r\nfunction Cardlist (props)\r\n{\r\n    return(\r\n        <div className=\"Cardlist\">\r\n            {props.informations.map(information => (\r\n              <Card key={information.id}  information={information}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default Cardlist","import React from 'react'\r\nimport './searchbox.css'\r\nfunction Searchbox(props)\r\n{\r\n    return(\r\n            <input \r\n               className='searchbox'\r\n               type='search'\r\n               placeholder='search'\r\n               onChange={props.handleOnserach}\r\n            />\r\n    )\r\n}\r\nexport default Searchbox","import React, { Component } from 'react';\nimport './App.css';\nimport Cardlist from './components/cardlist'\nimport Searchbox from './components/searchbox'\n\nclass App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state = {\n      informations: [],\n      searchfield:\"\"\n    };\n    this.handleOnserach = this.handleOnserach.bind(this)\n  }\n  componentDidMount() \n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => { \n      this.setState({informations: users})\n    });\n  }\n\n  handleOnserach(event)\n  {\n    this.setState({searchfield : event.target.value})\n  }\n  render() \n  {\n    const { informations, searchfield } =  this.state;  \n    const filteredmonsters = informations.filter(information =>\n      information.name.toLowerCase().includes(searchfield.toLowerCase())\n      );\n\n    return(\n      <div className=\"App\">\n        <h1 className=\"h1\">PINK ROLODEX</h1>\n        <Searchbox handleOnserach= {this.handleOnserach}/>\n        <Cardlist informations = {filteredmonsters}/>\n       \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}